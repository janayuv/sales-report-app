name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: sale-report-app/package-lock.json

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Install dependencies
        working-directory: ./sale-report-app
        run: npm ci

      - name: Build for all platforms
        working-directory: ./sale-report-app
        run: |
          npm run build
          npm run tauri build

      - name: Create checksums
        run: |
          cd sale-report-app/src-tauri/target/release/bundle
          find . -name "*.deb" -o -name "*.AppImage" -o -name "*.msi" -o -name "*.dmg" | xargs sha256sum > checksums.txt

      - name: Create release notes
        id: release_notes
        run: |
          echo "## üöÄ Release ${{ github.ref_name }}" > release_notes.md
          echo "" >> release_notes.md
          echo "### üì¶ Downloads" >> release_notes.md
          echo "" >> release_notes.md
          echo "| Platform | Download |" >> release_notes.md
          echo "|----------|----------|" >> release_notes.md
          
          # Add download links for each platform
          if [ -f "sale-report-app/src-tauri/target/release/bundle/deb/sales-report-app_*.deb" ]; then
            echo "| Linux (Debian/Ubuntu) | \`*.deb\` |" >> release_notes.md
          fi
          if [ -f "sale-report-app/src-tauri/target/release/bundle/appimage/sales-report-app_*.AppImage" ]; then
            echo "| Linux (AppImage) | \`*.AppImage\` |" >> release_notes.md
          fi
          if [ -f "sale-report-app/src-tauri/target/release/bundle/msi/sales-report-app_*.msi" ]; then
            echo "| Windows | \`*.msi\` |" >> release_notes.md
          fi
          if [ -f "sale-report-app/src-tauri/target/release/bundle/dmg/sales-report-app_*.dmg" ]; then
            echo "| macOS | \`*.dmg\` |" >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "### üîç Verification" >> release_notes.md
          echo "" >> release_notes.md
          echo "Verify the integrity of your download using the checksums:" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          cat sale-report-app/src-tauri/target/release/bundle/checksums.txt >> release_notes.md
          echo "\`\`\`" >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          body_path: release_notes.md
          files: |
            sale-report-app/src-tauri/target/release/bundle/**/*
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Update package.json version
  update-version:
    name: Update Version
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: sale-report-app/package-lock.json

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Update package.json
        working-directory: ./sale-report-app
        run: |
          npm version ${{ steps.version.outputs.VERSION }} --no-git-tag-version
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.VERSION }}"
          git push

  # Notify about release
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.release.result == 'success'
        run: |
          echo "‚úÖ Release ${{ github.ref_name }} created successfully!"
          echo "Check the releases page for downloads."

      - name: Notify failure
        if: needs.release.result == 'failure'
        run: |
          echo "‚ùå Release ${{ github.ref_name }} failed!"
          echo "Check the workflow logs for details."
